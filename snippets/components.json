{
  "Alignment Matrix Control": {
    "prefix": [
      "rw",
      "wp_components",
      "components",
      "AlignmentMatrixControl"
    ],
    "description": "AlignmentMatrixControl components enable adjustments to horizontal and vertical alignments for UI.",
    "body": [
      "$LINE_COMMENT Reference: https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/alignment-matrix-control\",",
      "",
      "import { AlignmentMatrixControl } from '@wordpress/components';",
      "",
      "<AlignmentMatrixControl value={ alignment } onChange={ setAlignment } />"
    ]
  },
  "AnglePickerControl": {
    "prefix": [
      "rw",
      "wp_components",
      "components",
      "AnglePickerControl"
    ],
    "description": "AnglePickerControl is a React component to render a UI that allows users to pick an angle. Users can choose an angle in a visual UI with the mouse by dragging an angle indicator inside a circle or by directly inserting the desired angle in a text field.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/angle-picker-control",
      "",
      "import { useState } from '@wordpress/element';",
      "import { AnglePickerControl } from '@wordpress/components';",
      "",
      "const MyAnglePicker = () => {",
      "\tconst [ angle, setAngle ] = useState();",
      "\treturn <AnglePickerControl value={ angle } onChange={ setAngle } />;",
      "};"
    ]
  },
  "Animate": {
    "prefix": [
      "rw",
      "wp_components",
      "components",
      "Animate"
    ],
    "description": "Simple interface to introduce animations to components.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/animate",
      "",
      "import { Animate } from '@wordpress/components';",
      "",
      "const MyAnimatedNotice = () => (",
      "\t<Animate type=\"slide-in\" options={ { origin: 'top' } }>",
      "\t\t{ ( { className } ) => (",
      "\t\t\t<Notice className={ className } status=\"success\">",
      "\t\t\t\t<p>Animation finished.</p>",
      "\t\t\t</Notice>",
      "\t\t) }",
      "\t</Animate>",
      ");"
    ]
  },
  "Autocomplete": {
    "prefix": [
      "rw",
      "wp_components",
      "components",
      "Autocomplete"
    ],
    "description": "This component is used to provide autocompletion support for a child input component.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/autocomplete",
      "",
      "import { Autocomplete } from '@wordpress/components';",
      "",
      "const MyAutocomplete = () => {",
      "\tconst autocompleters = [",
      "\t\t{",
      "\t\t\tname: 'fruit',",
      "\t\t\t// The prefix that triggers this completer",
      "\t\t\ttriggerprefix: rw|'~',",
      "\t\t\t// The option data",
      "\t\t\toptions: [",
      "\t\t\t\t{ visual: '🍎', name: 'Apple', id: 1 },",
      "\t\t\t\t{ visual: '🍊', name: 'Orange', id: 2 },",
      "\t\t\t\t{ visual: '🍇', name: 'Grapes', id: 3 },",
      "\t\t\t],",
      "\t\t\t// Returns a label for an option like \"🍊 Orange\"",
      "\t\t\tgetOptionLabel: ( option ) => (",
      "\t\t\t\t<span>",
      "\t\t\t\t\t<span className=\"icon\">{ option.visual }</span>",
      "\t\t\t\t\t{ option.name }",
      "\t\t\t\t</span>",
      "\t\t\t),",
      "\t\t\t// Declares that options should be matched by their name",
      "\t\t\tgetOptionKeywords: ( option ) => [ option.name ],",
      "\t\t\t// Declares that the Grapes option is disabled",
      "\t\t\tisOptionDisabled: ( option ) => option.name === 'Grapes',",
      "\t\t\t// Declares completions should be inserted as abbreviations",
      "\t\t\tgetOptionCompletion: ( option ) => (",
      "\t\t\t\t<abbr title={ option.name }>{ option.visual }</abbr>",
      "\t\t\t),",
      "\t\t},",
      "\t];",
      "",
      "\treturn (",
      "\t\t<div>",
      "\t\t\t<Autocomplete completers={ autocompleters }>",
      "\t\t\t\t{ ( { isExpanded, listBoxId, activeId } ) => (",
      "\t\t\t\t\t<div",
      "\t\t\t\t\t\tcontentEditable",
      "\t\t\t\t\t\tsuppressContentEditableWarning",
      "\t\t\t\t\t\taria-autocomplete=\"list\"",
      "\t\t\t\t\t\taria-expanded={ isExpanded }",
      "\t\t\t\t\t\taria-owns={ listBoxId }",
      "\t\t\t\t\t\taria-activedescendant={ activeId }",
      "\t\t\t\t\t></div>",
      "\t\t\t\t) }",
      "\t\t\t</Autocomplete>",
      "\t\t\t<p>Type ~ for triggering the autocomplete.</p>",
      "\t\t</div>",
      "\t);",
      "};"
    ]
  },
  "BaseControl": {
    "prefix": [
      "rw",
      "wp_components",
      "components",
      "BaseControl"
    ],
    "description": "BaseControl component is used to generate labels and help text for components handling user inputs.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/base-control",
      "",
      "import { BaseControl } from '@wordpress/components';",
      "",
      "const MyBaseControl = () => (",
      "\t<BaseControl id=\"textarea-1\" label=\"Text\" help=\"Enter some text\">",
      "\t\t<textarea id=\"textarea-1\" />",
      "\t</BaseControl>",
      ");"
    ]
  },
  "ButtonGroup": {
    "prefix": [
      "rw",
      "wp_components",
      "components",
      "ButtonGroup"
    ],
    "description": "ButtonGroup can be used to group any related buttons together. To emphasize related buttons, a group should share a common container.",
    "body": [
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/button-group",
      "",
      "import { Button, ButtonGroup } from '@wordpress/components';",
      "",
      "const MyButtonGroup = () => (",
      "\t<ButtonGroup>",
      "\t\t<Button variant=\"primary\">Button 1</Button>",
      "\t\t<Button variant=\"primary\">Button 2</Button>",
      "\t</ButtonGroup>",
      ");"
    ]
  },
  "PanelBody": {
    "prefix": [
      "rw",
      "wp_components",
      "PanelBody"
    ],
    "description": "The PanelBody creates a collapsible container that can be toggled open or closed.",
    "body": [
      "import { PanelBody} from '@wordpress/components';",
      "",
      "$LINE_COMMENT @see https://github.com/WordPress/gutenberg/tree/trunk/packages/components/src/panel#panelbody",
      "",
      "<PanelBody",
      "\t${1:title=\"${2:Panel Title}\"}",
      "\t${3:opened}",
      "\t${4:className=\"${5:panel-body-class}\"}",
      "\t${6:icon=\"${7:smiley}\"}",
      "\t${8:onToggle={() => {console.log('Toggled');}}}",
      "\t${9:initialOpen={${10:true|false}}}",
      "\t${11:children={(opened) => {console.log(opened);}}}",
      "\t${12:buttonProps={${13:{}}}}",
      "\t>",
      "\t\t$TM_SELECTED_TEXT",
      "</PanelBody>"
    ]
  }
}