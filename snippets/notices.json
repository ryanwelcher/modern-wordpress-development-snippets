{
  "createErrorNotice": {
    "prefix": [
      "rw",
      "wp_notices",
      "createErrorNotice"
    ],
    "description": "Returns an action object used in signalling that an error notice is to be created. Refer to createNotice for options documentation.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#createerrornotice",
      "",
      "import { __ } from '@wordpress/i18n';",
      "import { useDispatch } from '@wordpress/data';",
      "import { store as noticesStore } from '@wordpress/notices';",
      "import { Button } from '@wordpress/components';",
      "",
      "const ExampleComponent = () => {",
      "    const { createErrorNotice } = useDispatch( noticesStore );",
      "    return (",
      "        <Button",
      "            onClick={ () =>",
      "                createErrorNotice( __( 'An error occurred!' ), {",
      "                    type: 'snackbar',",
      "                    explicitDismiss: true,",
      "                } )",
      "            }",
      "        >",
      "            { __(",
      "                'Generate an snackbar error notice with explicit dismiss button.'",
      "            ) }",
      "        </Button>",
      "    );",
      "}"
    ]
  },
  "createInfoNotice": {
    "prefix": [
      "rw",
      "wp_notices",
      "wp_data",
      "createInfoNotice"
    ],
    "description": "Returns an action object used in signalling that an info notice is to be created. Refer to createNotice for options documentation.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#createinfonotice",
      "",
      "import { __ } from '@wordpress/i18n';",
      "import { useDispatch } from '@wordpress/data';",
      "import { store as noticesStore } from '@wordpress/notices';",
      "import { Button } from '@wordpress/components';",
      "",
      "const ExampleComponent = () => {",
      "    const { createInfoNotice } = useDispatch( noticesStore );",
      "    return (",
      "        <Button",
      "            onClick={ () =>",
      "                createInfoNotice( __( 'Something happened!' ), {",
      "                    isDismissible: false,",
      "                } )",
      "            }",
      "        >",
      "            { __( 'Generate a notice that cannot be dismissed.' ) }",
      "        </Button>",
      "    );",
      "};"
    ]
  },
  "createNotice": {
    "prefix": [
      "rw",
      "wp_notices",
      "wp_data",
      "createNotice"
    ],
    "description": "Returns an action object used in signalling that a notice is to be created.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#createnotice",
      "",
      "import { __ } from '@wordpress/i18n';",
      "import { useDispatch } from '@wordpress/data';",
      "import { store as noticesStore } from '@wordpress/notices';",
      "import { Button } from '@wordpress/components';",
      "",
      "const ExampleComponent = () => {",
      "    const { createNotice } = useDispatch( noticesStore );",
      "    return (",
      "        <Button",
      "            onClick={ () => createNotice( 'success', __( 'Notice message' ) ) }",
      "        >",
      "            { __( 'Generate a success notice!' ) }",
      "        </Button>",
      "    );",
      "};"
    ]
  },
  "createSuccessNotice": {
    "prefix": [
      "rw",
      "wp_notices",
      "wp_data",
      "createSuccessNotice"
    ],
    "description": "Returns an action object used in signalling that a success notice is to be created. Refer to createNotice for options documentation.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#createsuccessnotice",
      "",
      "import { __ } from '@wordpress/i18n';",
      "import { useDispatch } from '@wordpress/data';",
      "import { store as noticesStore } from '@wordpress/notices';",
      "import { Button } from '@wordpress/components';",
      "",
      "const ExampleComponent = () => {",
      "    const { createSuccessNotice } = useDispatch( noticesStore );",
      "    return (",
      "        <Button",
      "            onClick={ () =>",
      "                createSuccessNotice( __( 'Success!' ), {",
      "                    type: 'snackbar',",
      "                    icon: '<img draggable=\"false\" role=\"img\" class=\"emoji\" alt=\"ðŸ”¥\" src=\"https://s.w.org/images/core/emoji/14.0.0/svg/1f525.svg\">',",
      "                } )",
      "            }",
      "        >",
      "            { __( 'Generate a snackbar success notice!' ) }",
      "        </Button>",
      "    );",
      "};"
    ]
  },
  "createWarningNotice": {
    "prefix": [
      "rw",
      "wp_notices",
      "wp_data",
      "createWarningNotice"
    ],
    "description": "Returns an action object used in signalling that a warning notice is to be created. Refer to createNotice for options documentation.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#createwarningnotice",
      "",
      "import { __ } from '@wordpress/i18n';",
      "import { useDispatch } from '@wordpress/data';",
      "import { store as noticesStore } from '@wordpress/notices';",
      "import { Button } from '@wordpress/components';",
      "",
      "const ExampleComponent = () => {",
      "    const { createWarningNotice, createInfoNotice } =",
      "        useDispatch( noticesStore );",
      "    return (",
      "        <Button",
      "            onClick={ () =>",
      "                createWarningNotice( __( 'Warning!' ), {",
      "                    onDismiss: () => {",
      "                        createInfoNotice(",
      "                            __( 'The warning has been dismissed!' )",
      "                        );",
      "                    },",
      "                } )",
      "            }",
      "        >",
      "            { __( 'Generates a warning notice with onDismiss callback' ) }",
      "        </Button>",
      "    );",
      "};"
    ]
  },
  "getNotices": {
    "prefix": [
      "rw",
      "wp_notices",
      "wp_data",
      "getNotices"
    ],
    "description": "Returns all notices as an array, optionally for a given context. Defaults to the global context.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#getnotices",
      "",
      "import { useSelect } from '@wordpress/data';",
      "import { store as noticesStore } from '@wordpress/notices';",
      "",
      "const ExampleComponent = () => {",
      "    const notices = useSelect( ( select ) =>",
      "        select( noticesStore ).getNotices()",
      "    );",
      "    return (",
      "        <ul>",
      "            { notices.map( ( notice ) => (",
      "                <li key={ notice.ID }>{ notice.content }</li>",
      "            ) ) }",
      "        </ul>",
      "    );",
      "};"
    ]
  },
  "removeNotice": {
    "prefix": [
      "rw",
      "wp_notices",
      "wp_data",
      "removeNotice"
    ],
    "description": "Returns an action object used in signalling that a notice is to be removed.",
    "body": [
      "$LINE_COMMENT @see https://developer.wordpress.org/block-editor/reference-guides/data/data-core-notices/#removenotice",
      "",
      "import { __ } from '@wordpress/i18n';",
      "import { useDispatch } from '@wordpress/data';",
      "import { store as noticesStore } from '@wordpress/notices';",
      "import { Button } from '@wordpress/components';",
      "",
      "const ExampleComponent = () => {",
      "    const notices = useSelect( ( select ) =>",
      "        select( noticesStore ).getNotices()",
      "    );",
      "    const { createWarningNotice, removeNotice } = useDispatch( noticesStore );",
      "",
      "    return (",
      "        <>",
      "            <Button",
      "                onClick={ () =>",
      "                    createWarningNotice( __( 'Warning!' ), {",
      "                        isDismissible: false,",
      "                    } )",
      "                }",
      "            >",
      "                { __( 'Generate a notice' ) }",
      "            </Button>",
      "            { notices.length > 0 && (",
      "                <Button onClick={ () => removeNotice( notices[ 0 ].id ) }>",
      "                    { __( 'Remove the notice' ) }",
      "                </Button>",
      "            ) }",
      "        </>",
      "    );",
      "};"
    ]
  }
}